body {
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: row;
  height: 100vh;
  width: 100vw;
}

#board {
  width: 90vmin;
}

.boardSquare {
  /* Width calculated by board width divided by 8 minus (border size times 16).
   * Height set to same as width since each cell should be a square. */
  width: calc((90vmin - 16px) / 8);
  height: calc((90vmin - 16px) / 8);
  float: left;
  border: 1px solid black;
}

#captured {
  display: flex;
  flex-direction: column;
}

#capturedOwn, #capturedOpponent {
  display: flex;
  margin-left: 5vmin;
  /*height: calc(45vmin - 1px);*/
  height: 45vmin;
  width: calc(90vmin / 2);
  /*border: 1px solid black;*/
  align-content: flex-start;
  flex-direction: row;
}

#capturedOwn {
  /*border-bottom: 0;*/
  flex-wrap: wrap;
}

#capturedOpponent {
  /*border-top: 0;*/
  flex-wrap: wrap-reverse;
}

.even {
  background: #ddd;
}

.acceptable {
  background: #ffff98;
}

.acceptable.even {
  background: #eaea84;
}

#capturedOwn > img, #capturedOpponent > img {
  cursor: unset;
}

img {
  /* Width and height set to same as each cell (.board_square). */
  width: calc((90vmin - 16px) / 8);
  height: calc((90vmin - 16px) / 8);
  cursor: move;
}

#pawnUpgradePrompt {
  display: none;
  width: calc(90vmin - 2px);
  height: calc(90vmin - 2px);
  border: 1px solid black;
}

/* When width smaller than height. */
@media screen and (orientation: portrait) {
  body {
    flex-direction: column;
  }

  #captured {
    flex-direction: row;
  }

  #capturedOwn, #capturedOpponent {
    margin-left: 0;
    margin-top: 5vmin;
    /*width: calc(45vmin - 1px); */
    width: 45vmin;
    height: calc(90vmin / 2);
    flex-direction: column;
  }

  #capturedOwn {
    /*border-bottom: 1px solid black;
    border-right: 0;*/
  }

  #capturedOpponent {
    /*border-top: 1px solid black;
    border-left: 0;*/
  }
}

/* When width smaller than height but close enough to a square that not
 * everything fits. */
@media screen and (orientation: portrait) and (min-aspect-ratio: 2/3) {
  #board {
    width: 60vh;
  }

  #captured {
    flex-direction: row;
  }

  #capturedOwn, #capturedOpponent {
    /*width: calc(30vh - 1px);*/
    width: 30vh;
    height: calc(60vh / 2);
  }

  .boardSquare {
    width: calc((60vh - 16px) / 8);
    height: calc((60vh - 16px) / 8);
  }

  img {
    width: calc((60vh - 16px) / 8);
    height: calc((60vh - 16px) / 8);
  }
}

/* When width larger than height but close enough to a square that not
 * everything fits. */
@media screen and (orientation: landscape) and (max-aspect-ratio: 3/2) {
  #board {
    width: 60vw;
  }

  #capturedOwn, #capturedOpponent {
    width: calc(60vw / 2);
    /*height: calc(30vw - 1px);*/
    height: 30vw;
  }

  .boardSquare {
    width: calc((60vw - 16px) / 8);
    height: calc((60vw - 16px) / 8);
  }

  img {
    width: calc((60vw - 16px) / 8);
    height: calc((60vw - 16px) / 8);
  }
}
