body {
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: row;
  height: 100vh;
  width: 100vw;
}

.showRot {
  transition: all 2s ease-in-out;
}

.rotClock {
  transform: rotate(180deg);
}

.rotCClock {
  transform: rotate(-180deg);
}

#board {
  --length: 90vmin;
  width: var(--length);
}

.boardSquare {
  /* Width calculated by board width divided by 8 minus (border size times 16).
   * Height set to same as width since each cell should be a square. */
  --border-width: 1px;
  --square-length: calc((var(--length) - 16 * var(--border-width)) / 8);
  width: var(--square-length);
  height: var(--square-length);
  float: left;
  border: var(--border-width) solid black;
}

#captured {
  --length: 90vmin;
  --square-length: calc(var(--length) / 8);
  display: flex;
  flex-direction: column;
}

#capturedOwn, #capturedOpponent {
  display: flex;
  --boardside-margin: 5vmin;
  margin-left: var(--boardside-margin);
  height: calc(var(--length) / 2);
  width: calc(var(--length) / 2);
  align-content: flex-start;
  flex-direction: row;
}

#capturedOwn {
  flex-wrap: wrap;
}

#capturedOpponent {
  flex-wrap: wrap-reverse;
}

.even {
  background: #ddd;
}

.acceptable {
  background: #ffff98;
}

.acceptable.even {
  background: #eaea84;
}

#capturedOwn > img, #capturedOpponent > img {
  cursor: unset;
}

img {
  /* Width and height set to same as each cell (.board_square). */
  width: var(--square-length);
  height: var(--square-length);
  cursor: move;
}

#pawnUpgradePrompt {
  display: none;
  --length: 90vmin;
  --border-width: 1px;
  width: calc(var(--length) - 2 * var(--border-width));
  height: calc(var(--length) - 2 * var(--border-width));
  border: var(--border-width) solid black;
}

/* When width smaller than height. */
@media screen and (orientation: portrait) {
  body {
    flex-direction: column;
  }

  #captured {
    flex-direction: row;
  }

  #capturedOwn, #capturedOpponent {
    margin-left: 0;
    margin-top: var(--boardside-margin);
    flex-direction: column;
  }
}

/* When width smaller than height but close enough to a square that not
 * everything fits. */
@media screen and (orientation: portrait) and (min-aspect-ratio: 2/3) {
  #board {
    --length: 60vh;
  }

  #captured {
    --length: 60vh;
    flex-direction: row;
  }
}

/* When width larger than height but close enough to a square that not
 * everything fits. */
@media screen and (orientation: landscape) and (max-aspect-ratio: 3/2) {
  #board {
    --length: 60vw;
  }

  #captured {
    --length: 60vw;
  }
}
